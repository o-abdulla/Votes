{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/vote.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction VotesComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function VotesComponent_div_0_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const v_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.vote(v_r1.id));\n    });\n    i0.ɵɵtext(4, \"Vote\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const v_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Recipe: \", v_r1.recipe, \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Votes: \", v_r1.votes, \"\");\n  }\n}\nexport class VotesComponent {\n  constructor(_voteService) {\n    this._voteService = _voteService;\n    this.votes = [];\n    this.newRecipe = '';\n  }\n  ngOnInit() {\n    this._voteService.getVotes().subscribe(response => {\n      console.log(response);\n      this.votes = response;\n    });\n    return this.votes;\n  }\n  vote(id) {\n    this._voteService.castVote(id).subscribe(response => {\n      console.log(response);\n      // updates votes without refreshing page\n      let updateVote = this.votes.find(vote => vote.id === id);\n      if (updateVote) {\n        updateVote.votes++;\n      }\n    });\n  }\n}\nVotesComponent.ɵfac = function VotesComponent_Factory(t) {\n  return new (t || VotesComponent)(i0.ɵɵdirectiveInject(i1.VoteService));\n};\nVotesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: VotesComponent,\n  selectors: [[\"app-votes\"]],\n  decls: 10,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", \"placeholder\", \"Recipe Name\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"]],\n  template: function VotesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, VotesComponent_div_0_Template, 7, 2, \"div\", 0);\n      i0.ɵɵelement(1, \"br\")(2, \"br\")(3, \"br\");\n      i0.ɵɵelementStart(4, \"div\")(5, \"h5\");\n      i0.ɵɵtext(6, \"Add a Recipe to the list for voting\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function VotesComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.newRecipe = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function VotesComponent_Template_button_click_8_listener() {\n        return ctx.addRecipe();\n      });\n      i0.ɵɵtext(9, \"Add Recipe\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.votes);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.newRecipe);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;IAAAA,2BAA6B;IACtBA,YAAuB;IAAAA,iCAA6B;IAArBA;MAAA;MAAA;MAAA;MAAA,OAASA,mCAAU;IAAA,EAAC;IAACA,oBAAI;IAAAA,iBAAS;IACpEA,yBAAG;IAAAA,YAAoB;IAAAA,iBAAI;;;;IADxBA,eAAuB;IAAvBA,mDAAuB;IACvBA,eAAoB;IAApBA,gDAAoB;;;ACO3B,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,YAAyB;IAAzB,iBAAY,GAAZA,YAAY;IAHhC,UAAK,GAAU,EAAE;IACjB,cAAS,GAAU,EAAE;EAE2B;EAEhDC,QAAQ;IACN,IAAI,CAACD,YAAY,CAACE,QAAQ,EAAE,CAACC,SAAS,CAAEC,QAAe,IAAI;MACzDC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrB,IAAI,CAACG,KAAK,GAAGH,QAAQ;IACvB,CAAC,CAAC;IACF,OAAO,IAAI,CAACG,KAAK;EACnB;EAEAC,IAAI,CAACC,EAAS;IACZ,IAAI,CAACT,YAAY,CAACU,QAAQ,CAACD,EAAE,CAAC,CAACN,SAAS,CAAEC,QAAa,IAAI;MACzDC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MAErB;MACA,IAAIO,UAAU,GAAG,IAAI,CAACJ,KAAK,CAACK,IAAI,CAACJ,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MACxD,IAAIE,UAAU,EAAE;QACdA,UAAU,CAACJ,KAAK,EAAE;;IAEtB,CAAC,CAAC;EAEJ;;AA1BWT,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAe;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDT3BpB,+DAIM;MAENA,qBAAI;MAIJA,2BAAK;MACGA,mDAAmC;MAAAA,iBAAK;MAC5CA,gCAAqE;MAAlDA;QAAA;MAAA,EAAuB;MAA1CA,iBAAqE;MACrEA,iCAA8B;MAAtBA;QAAA,OAASqB,eAAW;MAAA,EAAC;MAACrB,0BAAU;MAAAA,iBAAS;;;MAblCA,mCAAQ;MAYJA,eAAuB;MAAvBA,uCAAuB","names":["i0","VotesComponent","constructor","_voteService","ngOnInit","getVotes","subscribe","response","console","log","votes","vote","id","castVote","updateVote","find","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\osabd\\source\\repos\\Votes\\Votes\\ClientApp\\src\\app\\components\\votes\\votes.component.html","C:\\Users\\osabd\\source\\repos\\Votes\\Votes\\ClientApp\\src\\app\\components\\votes\\votes.component.ts"],"sourcesContent":["<div *ngFor=\"let v of votes\">\n    <p>Recipe: {{ v.recipe }} <button (click)=\"vote(v.id)\">Vote</button></p>\n    <p>Votes: {{ v.votes }}</p>\n    \n</div>\n\n<br>\n<br>\n<br>\n\n<div>\n    <h5>Add a Recipe to the list for voting</h5>\n    <input type=\"text\" [(ngModel)]=\"newRecipe\" placeholder=\"Recipe Name\">\n    <button (click)=\"addRecipe()\">Add Recipe</button>\n</div>","import { Component } from '@angular/core';\nimport { Vote } from 'src/app/models/vote';\nimport { VoteService } from 'src/app/services/vote.service';\n\n@Component({\n  selector: 'app-votes',\n  templateUrl: './votes.component.html',\n  styleUrls: ['./votes.component.css']\n})\nexport class VotesComponent {\n\n  votes:Vote[] = [];\n  newRecipe:string = '';\n\n  constructor(private _voteService: VoteService) {}\n\n  ngOnInit(){\n    this._voteService.getVotes().subscribe((response:Vote[]) => {\n      console.log(response);\n      this.votes = response;\n    });\n    return this.votes;\n  }\n\n  vote(id:number):void{\n    this._voteService.castVote(id).subscribe((response:Vote) =>{\n      console.log(response);\n\n      // updates votes without refreshing page\n      let updateVote = this.votes.find(vote => vote.id === id);\n      if (updateVote) {\n        updateVote.votes++;\n      }\n    })\n    \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}